'use strict';

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var regeneratorRuntime = require("regenerator-runtime");
var basicAuth = require('basic-auth');

module.exports = function () {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { username: 'username', password: 'password' };

  return function () {
    var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee2(req, res, next) {
      var basicAuthenticator = function () {
        var _ref2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee(name, pass, username, password) {
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  return _context.abrupt('return', username === name && password === pass);

                case 1:
                case 'end':
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        return function basicAuthenticator(_x5, _x6, _x7, _x8) {
          return _ref2.apply(this, arguments);
        };
      }();

      var username, password, authenticator, credentials, authenticated;
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              username = options.username, password = options.password;
              authenticator = options.authenticator;
              credentials = basicAuth(req);
              authenticated = void 0;


              if (!authenticator) authenticator = basicAuthenticator;

              _context2.prev = 5;
              _context2.next = 8;
              return authenticator(credentials.name, credentials.pass, username, password);

            case 8:
              authenticated = _context2.sent;
              _context2.next = 14;
              break;

            case 11:
              _context2.prev = 11;
              _context2.t0 = _context2['catch'](5);

              console.error('Could not authenticate:', _context2.t0);

            case 14:
              if (authenticated) {
                _context2.next = 17;
                break;
              }

              res.set('WWW-Authenticate', 'Basic realm=Authorization Required');
              return _context2.abrupt('return', res.sendStatus(401));

            case 17:

              next();

            case 18:
            case 'end':
              return _context2.stop();
          }
        }
      }, _callee2, this, [[5, 11]]);
    }));

    return function (_x2, _x3, _x4) {
      return _ref.apply(this, arguments);
    };
  }();
};